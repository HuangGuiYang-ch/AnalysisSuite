# Amira-Script-Object V3.0
# Master script object to load density files (amiramesh) for different clones

# To use this:
# 1) Prepare a directory containing density files for the clones
#    Give them short names (eg aSP3g_F.am)
#    and make sure they all have the same suffix
# 2) Load in a copy of the script which makes a little object
# 3) Specify a filename - one of the density files in your directory
# 4) Click LoadAll
# 5) HideAll/ShowAll will show hide the volume renderings
# 6) You can also use the checkboxes
# 7) You can use the setCloneColour function in the TCL window 
#    e.g. ShowClones.scro setCloneColour "aSP3-c_F" 0 1 0.843137254901961
# 8) you can put a bunch of these commands into a tcl script (name ends in .hx)
#    See: setCloneColourExampleScript.hx for an example
# 9) You can also use R to set colours, see RainbowColourCloneScript() in FruMARCMCode
#    R can even do the equivalent of dragging and dropping the script onto Amira 
#    for you by system(paste("open",hxscriptfilename))

# For some reason I have to make a copy of this variable
set myScriptDir ${SCRIPTDIR}

$this proc constructor { } {
	global this
	global myScriptDir
	echo "Script directory is: $myScriptDir"
	$this newPortFilename filename
	# $this filename setValue ${myScriptDir}/lists
	$this filename setValue /GD/projects/Sebastian/fruitless/RegistrationFolders/IS2Reg/SelectedExtractedClones/AL-d_F.am
	
    $this newPortButtonList Action 5
	$this Action setLabel Action:
	$this Action setLabel 0 LoadAll
	$this Action setLabel 1 Remove
	$this Action setLabel 2 Update
	$this Action setLabel 3 HideAll
	$this Action setLabel 4 ShowIcons
	
	$this newPortFloatSlider red
	$this red setMinMax 0 1
	$this newPortFloatSlider green
	$this green setMinMax 0 1
	$this newPortFloatSlider blue
	$this blue setMinMax 0 1
	
	# $this newPortFloatSlider width
	# $this width setMinMax 0 2.5
	# $this width setValue 1
	# 
	# $this newPortIntSlider ScoreThreshold
	# $this ScoreThreshold setMinMax 0 4
	# $this ScoreThreshold setValue 4
	
	$this setVar dirName ""
	
	$this setVar lafObjectList ""
	$this setVar fileList ""
	$this setVar glomTogList ""
	$this setVar glomActive ""

	# $this setVar thresholds ""
	# $this setVar widths ""
	
	# $this newPortInfo numObjects
	# $this updateNumObjects

	# Now define this based on script location - much cleaner
	$this setVar lafScriptFile ${myScriptDir}/loadAllFile.scro
}


$this proc compute { } {
	
	if { [ $this Action isNew  ] && [$this Action getValue]==0 } {
		$this makeFileListFromDir
		$this loadFiles
		# $this updateNumObjects
	}
	if { [ $this Action isNew  ] && [$this Action getValue]==2} {
		#$this myupdate
	}
	if { [ $this Action isNew  ] && [$this Action getValue]==3} {		
		if { [ $this Action getLabel 3]=="ShowAll" } {
			$this showLineViews 1
		} elseif {[ $this Action getLabel 3]=="HideAll" } {
			$this showLineViews 0
		}
		# $this updateNumObjects
	}
	if { [ $this Action isNew  ] && [$this Action getValue]==4} {
		if { [ $this Action getLabel 4]=="ShowIcons" } {
			$this showIcons 1
		} elseif {[ $this Action getLabel 4]=="HideIcons" } {
			$this showIcons 0
		}
	}
	# if { [ $this ScoreThreshold isNew ] } {
	# 	# $this updateLafObjectsThreshold
	# 	$this updateNumObjects
	# }
	if { [ $this red isNew ] || [ $this green isNew ] || [ $this blue isNew ] } {
		$this updateLafObjectsColor
	}
	set glomActive ""
	foreach glomTog [$this getVar glomTogList] {
		for {set i 0} {$i < 6} {incr i} {
			set obj [$this $glomTog getLabel $i]
			#echo "checking obj $obj"
			if {[exists $obj]} {
				#echo "obj $obj exists"
				if {[ $this $glomTog isNew ]} {
					$obj setViewerMask [$this $glomTog getValue $i]
				}
				if {[$this $glomTog getValue $i]} {
					lappend glomActive [$this $glomTog getLabel $i]
					#echo [concat "added " [$this $glomTog getLabel $i]]
				}
			}
		}
	} 
	$this setVar glomActive $glomActive
	# echo $glomActive
	# uncomment to turn on continuous update
	# $this myupdate
}

$this proc showLineViews {mask} {
	set glomActive ""
	foreach glomTog [$this getVar glomTogList] {
		for {set i 0} {$i < 6} {incr i} {
			set obj [$this $glomTog getLabel $i]
			#echo "checking obj $obj"
			if {[exists $obj]} {
				#echo "obj $obj exists"
				$this $glomTog setValue $i $mask
				if {$mask} {
					lappend glomActive [$this $glomTog getLabel $i]
					#echo [concat "added " [$this $glomTog getLabel $i]]
				}
			}
		}
	} 
	$this setVar glomActive $glomActive
	if {$mask == 0} { $this Action setLabel 3 ShowAll}
	if {$mask == 1} { $this Action setLabel 3 HideAll}
}

# $this proc updateNumObjects {} {
# 	set numObjects 0
# 	foreach lafObject [$this getVar lafObjectList] {
# 		if {[exists $lafObject]} {
# 			set numObjects [expr $numObjects + 1]
# 		}
# 	}
# 	$this setVar numObjects $numObjects
# }	



# $this proc updateLafObjectsThreshold {} {
# 	foreach glom [$this getVar glomActive] {
# 		if {[exists $glom]} {
# 			$glom ScoreThreshold setValue [$this ScoreThreshold getValue]
# 			$glom fire
# 		}
# 	} 
# }

$this proc updateLafObjectsColor {} {
	foreach glom [$this getVar glomActive] {
		if {[exists $glom]} {
			$glom colormap disconnect
			$glom doIt hit
			$glom fire
			
			$glom colormap disconnect
			$glom range setValue 1 254
			$glom range setValue 1 255
			$glom colormap setDefaultColor [$this red getValue] [$this green getValue] [$this blue getValue]
			$glom colormap setDefaultAlpha 0.500000
			$glom doIt hit
			$glom fire
		}
	} 
}

$this proc setCloneColour { clone r g b } {
	if {[exists $clone]} {
		$clone colormap disconnect
		$clone doIt hit
		$clone fire
		
		$clone colormap disconnect
		$clone range setValue 1 254
		$clone range setValue 1 255
		$clone colormap setDefaultColor $r $g $b
		$clone colormap setDefaultAlpha 0.500000
		$clone doIt hit
		$clone fire
	}
}

$this proc showIcons {mask} {
}

$this proc removeAll {} {
	# remove all "loadAllFile.scro" objects and their dependent objects
	foreach glom [$this getVar glomActive] {
		if {[exists $glom]} {
			$glom removeAll
			$glom green setValue [$this green getValue]
			$glom blue setValue [$this blue getValue]
			# $glom width setValue [$this width getValue]
			$glom fire
		}
	} 
}

$this proc makeFileListFromDir {} {
	set filename [ $this filename getValue ] 
	set fileList [glob [file dirname $filename]/*[file extension $filename]]
	# set the instance variable fileList to the value of the local fileList
	$this setVar fileList $fileList
	$this setVar dirName [file dirname $filename]
}

$this proc loadFiles {} {
	set fileList [$this getVar fileList]	
	set lafObjectList [$this getVar lafObjectList]
	# set thresholds [$this getVar thresholds]
	# set widths [$this getVar widths]
	
	set xstart [lindex [$this getIconPosition] 0]
	set ystart [lindex [$this getIconPosition] 1]
	
	#echo $fileList
	foreach file $fileList {
		if {[file size $file] > 0} {
			set splitFile [file split $file]
			set justfilename [lindex $splitFile [expr [llength $splitFile]-1]]
			if { [file isfile $file] == 0 } { continue }
			set newModule [load $file]
			# set the correct file list name for the new object
			# $newModule fileListName setValue $file
			# tell the new module to load in the file list
			
			# $newModule Action setValue 4
			# $newModule width setValue [$this width getValue]
			# $newModule ScoreThreshold setValue [$this ScoreThreshold getValue]
			set glom [lindex [split $justfilename .] 0]
			set ypos [expr $ystart + [expr [llength $lafObjectList] * 20 ] + 20]
			
			$newModule setIconPosition [expr $xstart + 50 ] $ypos
			$newModule fire
			
			set lineView [create HxVoltex]
			$lineView setIconPosition [expr $xstart] $ypos
			$lineView data connect $newModule
			# this removes the volume rendering type colour map (which is always attached)
			$lineView colormap disconnect
			$lineView doIt hit
			$lineView fire
			# this sets the constant colour settings (in the absence of attached colormap)
			$lineView colormap disconnect
			$lineView slices setValue 256
			$lineView range setValue 0 15
			$lineView range setValue 1 255
			$lineView colormap setDefaultColor [$this red getValue] [$this green getValue] [$this blue getValue]
			$lineView colormap setDefaultAlpha 0.500000
			# this is required to update the Voltex
			$lineView doIt hit
			$lineView fire
			
			# $newModule setLabel $glom
			$lineView setLabel "$glom"
			
			$newModule hideIcon
			lappend lafObjectList $glom
			# lappend widths [$this width getValue]
			# lappend thresholds [$this ScoreThreshold getValue]
		}
	}
	#set hideNewModules 0
	$this setVar lafObjectList $lafObjectList
	$this makeCloneToggles
}

$this proc makeCloneToggles {} {
	set lafObjectList [$this getVar lafObjectList]
	for {set i 0} {$i<[llength $lafObjectList]} { set i [expr $i + 6]} {
		set j [expr $i / 6]
		$this newPortToggleList "Clone$j" 6
		lappend glomTogList "Clone$j"
		for {set k 0} {[expr $k + $i] < [llength $lafObjectList]} { incr k} {
			$this "Clone$j" setLabel $k [lindex $lafObjectList [expr $k + $i]] 
			$this "Clone$j" setValue $k 1
		}
	}		
	$this setVar glomTogList $glomTogList
}
